/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "giac.h"


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< giac::gen >::const_reference std_vector_Sl_giac_gen_Sg__get(std::vector< giac::gen > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_giac_gen_Sg__set(std::vector< giac::gen > *self,int i,std::vector< giac::gen >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1tabptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::sym_tab *arg2 = (giac::sym_tab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::sym_tab **)&jarg2; 
  if (arg1) (arg1)->tabptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1tabptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::sym_tab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::sym_tab *) ((arg1)->tabptr);
  *(giac::sym_tab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1globalcontextptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  if (arg1) (arg1)->globalcontextptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1globalcontextptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::context *) ((arg1)->globalcontextptr);
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1previous_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  if (arg1) (arg1)->previous = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1previous_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::context *) ((arg1)->previous);
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1globalptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::global *arg2 = (giac::global *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::global **)&jarg2; 
  if (arg1) (arg1)->globalptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1globalptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::global *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::global *) ((arg1)->globalptr);
  *(giac::global **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  if (arg1) (arg1)->parent = (giac::context const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::context *) ((arg1)->parent);
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1quoted_1global_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::vecteur *arg2 = (giac::vecteur *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::vecteur **)&jarg2; 
  if (arg1) (arg1)->quoted_global_vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1quoted_1global_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::vecteur *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::vecteur *) ((arg1)->quoted_global_vars);
  *(giac::vecteur **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1history_1in_1ptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::vecteur *arg2 = (giac::vecteur *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::vecteur **)&jarg2; 
  if (arg1) (arg1)->history_in_ptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1history_1in_1ptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::vecteur *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::vecteur *) ((arg1)->history_in_ptr);
  *(giac::vecteur **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_context_1history_1out_1ptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  giac::context *arg1 = (giac::context *) 0 ;
  giac::vecteur *arg2 = (giac::vecteur *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  arg2 = *(giac::vecteur **)&jarg2; 
  if (arg1) (arg1)->history_out_ptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1history_1out_1ptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::vecteur *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::vecteur *) ((arg1)->history_out_ptr);
  *(giac::vecteur **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1context_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (giac::context *)new giac::context();
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1context_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::context const & reference is null");
    return 0;
  } 
  result = (giac::context *)new giac::context((giac::context const &)*arg1);
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1context_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (giac::context *)new giac::context((std::string const &)*arg1);
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_delete_1context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  giac::context *arg1 = (giac::context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::context **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_context_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = (giac::context *)((giac::context const *)arg1)->clone();
  *(giac::context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_javagiac_giacJNI_gen_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (unsigned char) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1type_1unused_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->type_unused = arg2;
}


SWIGEXPORT jshort JNICALL Java_javagiac_giacJNI_gen_1type_1unused_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (unsigned char) ((arg1)->type_unused);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1subtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  signed char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (signed char)jarg2; 
  if (arg1) (arg1)->subtype = arg2;
}


SWIGEXPORT jbyte JNICALL Java_javagiac_giacJNI_gen_1subtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  signed char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (signed char) ((arg1)->subtype);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->reserved = arg2;
}


SWIGEXPORT jint JNICALL Java_javagiac_giacJNI_gen_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (unsigned short) ((arg1)->reserved);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_javagiac_giacJNI_gen_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (int) ((arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1ref_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (int *) &((giac::gen const *)arg1)->ref_count();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (giac::gen *)new giac::gen();
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  short arg2 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (short)jarg2; 
  result = (giac::gen *)new giac::gen(arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  longlong arg1 ;
  longlong *argp1 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(longlong **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null longlong");
    return 0;
  }
  arg1 = *argp1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac_float *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac_float **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac_float const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac_float const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_javagiac_giacJNI_gen_1DOUBLE_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (double)((giac::gen const *)arg1)->DOUBLE_val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1FLOAT_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac_float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = ((giac::gen const *)arg1)->FLOAT_val();
  *(giac_float **)&jresult = new giac_float((const giac_float &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (giac::gen *)new giac::gen(arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (giac::gen *)new giac::gen(arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::gen *arg2 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::gen const &)*arg1,(giac::gen const &)*arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::complex< double > *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::complex< double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::complex< double > const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((std::complex< double > const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::gen const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::identificateur *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::identificateur **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::identificateur const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::identificateur const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::ref_identificateur *arg1 = (giac::ref_identificateur *) 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::ref_identificateur **)&jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  giac::vecteur *arg1 = 0 ;
  short arg2 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::vecteur **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::vecteur const & reference is null");
    return 0;
  } 
  arg2 = (short)jarg2; 
  result = (giac::gen *)new giac::gen((giac::vecteur const &)*arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::vecteur *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::vecteur **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::vecteur const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::vecteur const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  giac::ref_vecteur *arg1 = (giac::ref_vecteur *) 0 ;
  short arg2 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::ref_vecteur **)&jarg1; 
  arg2 = (short)jarg2; 
  result = (giac::gen *)new giac::gen(arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::ref_vecteur *arg1 = (giac::ref_vecteur *) 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::ref_vecteur **)&jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::symbolic *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::symbolic **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::symbolic const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::symbolic const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::ref_symbolic *arg1 = (giac::ref_symbolic *) 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::ref_symbolic **)&jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::gen_user *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::gen_user **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen_user const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::gen_user const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::real_object *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::real_object **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::real_object const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::real_object const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::Tref_tensor< giac::gen > *arg1 = (giac::Tref_tensor< giac::gen > *) 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::Tref_tensor< giac::gen > **)&jarg1; 
  result = (giac::gen *)new giac::gen(arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::polynome *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::polynome **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::polynome const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::polynome const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::fraction *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::fraction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::fraction const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::fraction const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(giac::context **)&jarg2; 
  result = (giac::gen *)new giac::gen((std::string const &)*arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  giac::unary_function_ptr *arg1 = 0 ;
  int arg2 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::unary_function_ptr **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::unary_function_ptr const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (giac::gen *)new giac::gen((giac::unary_function_ptr const &)*arg1,arg2);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::unary_function_ptr *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::unary_function_ptr **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::unary_function_ptr const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::unary_function_ptr const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::gen_map *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::gen_map **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen_map const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::gen_map const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::eqwdata *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::eqwdata **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::eqwdata const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::eqwdata const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::grob *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::grob **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::grob const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::grob const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_new_1gen_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  giac::my_mpz *arg1 = 0 ;
  giac::gen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::my_mpz **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::my_mpz const & reference is null");
    return 0;
  } 
  result = (giac::gen *)new giac::gen((giac::my_mpz const &)*arg1);
  *(giac::gen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_delete_1gen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(giac::gen **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1ref_1ZINTptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  mpz_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (mpz_t *)((giac::gen const *)arg1)->ref_ZINTptr();
  *(mpz_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1ref_1REALptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::real_object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (giac::real_object *)((giac::gen const *)arg1)->ref_REALptr();
  *(giac::real_object **)&jresult = result; 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1ref_1FUNCptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::unary_function_ptr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (giac::unary_function_ptr *)((giac::gen const *)arg1)->ref_FUNCptr();
  *(giac::unary_function_ptr **)&jresult = result; 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1ref_1USERptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::gen_user *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (giac::gen_user *)((giac::gen const *)arg1)->ref_USERptr();
  *(giac::gen_user **)&jresult = result; 
  return jresult;
}



SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1ref_1POINTER_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (void *)((giac::gen const *)arg1)->ref_POINTER_val();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_javagiac_giacJNI_gen_1in_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::gen *arg3 = 0 ;
  giac::context *arg4 = (giac::context *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::gen **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen & reference is null");
    return 0;
  } 
  arg4 = *(giac::context **)&jarg4; 
  result = (bool)((giac::gen const *)arg1)->in_eval(arg2,*arg3,(giac::context const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  {
    try {
      result = ((giac::gen const *)arg1)->eval(arg2,(giac::context const *)arg3); 
    } catch (std::runtime_error &e) {
      std::cout << "An exception occurred in eval: " << e.what() << "\n";
    }
  }
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_javagiac_giacJNI_gen_1in_1evalf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::gen *arg3 = 0 ;
  giac::context *arg4 = (giac::context *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::gen **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen & reference is null");
    return 0;
  } 
  arg4 = *(giac::context **)&jarg4; 
  result = (bool)((giac::gen const *)arg1)->in_evalf(arg2,*arg3,(giac::context const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1evalf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  result = ((giac::gen const *)arg1)->evalf(arg2,(giac::context const *)arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1evalf_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  result = ((giac::gen const *)arg1)->evalf_double(arg2,(giac::context const *)arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1evalf2double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  result = ((giac::gen const *)arg1)->evalf2double(arg2,(giac::context const *)arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_javagiac_giacJNI_gen_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (int)((giac::gen const *)arg1)->to_int();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_javagiac_giacJNI_gen_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  result = ((giac::gen const *)arg1)->print(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_javagiac_giacJNI_gen_1sprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  giac::context *arg3 = (giac::context *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  result = (int)((giac::gen const *)arg1)->sprint(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_javagiac_giacJNI_gen_1print_1universal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  result = ((giac::gen const *)arg1)->print_universal(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_javagiac_giacJNI_gen_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = ((giac::gen const *)arg1)->print();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1wprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  result = (wchar_t *)((giac::gen const *)arg1)->wprint(arg2);
  *(wchar_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1modify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->modify(arg2);
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1dbgprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  ((giac::gen const *)arg1)->dbgprint();
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_gen_1uncoerce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  giac::gen *arg1 = (giac::gen *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  (arg1)->uncoerce();
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1conj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  result = ((giac::gen const *)arg1)->conj(arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1squarenorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::context **)&jarg2; 
  result = ((giac::gen const *)arg1)->squarenorm(arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_javagiac_giacJNI_gen_1bindigits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (int)((giac::gen const *)arg1)->bindigits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1operator_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  result = ((giac::gen const *)arg1)->operator_at(arg2,arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1operator_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::gen *arg2 = 0 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg3 = *(giac::context **)&jarg3; 
  result = ((giac::gen const *)arg1)->operator_at((giac::gen const &)*arg2,arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1operator_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::gen *arg2 = 0 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg3 = *(giac::context **)&jarg3; 
  result = ((giac::gen const *)arg1)->operator ()((giac::gen const &)*arg2,arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_javagiac_giacJNI_gen_1islesscomplexthan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  giac::gen *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  result = (bool)((giac::gen const *)arg1)->islesscomplexthan((giac::gen const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_javagiac_giacJNI_gen_1is_1approx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (bool)((giac::gen const *)arg1)->is_approx();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_javagiac_giacJNI_gen_1symb_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  result = (int)((giac::gen const *)arg1)->symb_size();
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_gen_1makegen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  giac::gen *arg1 = (giac::gen *) 0 ;
  int arg2 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::gen **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((giac::gen const *)arg1)->makegen(arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_parsed_1gen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  giac::context *arg1 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(giac::context **)&jarg1; 
  result = giac::parsed_gen(arg1);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_javagiac_giacJNI_parsed_1gen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return ;
  } 
  arg2 = *(giac::context **)&jarg2; 
  giac::parsed_gen((giac::gen const &)*arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_ifactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::ifactor((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1UTPN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_UTPN((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_UTPC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::gen *arg2 = 0 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg3 = *(giac::context **)&jarg3; 
  result = giac::UTPC((giac::gen const &)*arg1,(giac::gen const &)*arg2,arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1UTPC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_UTPC((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_UTPT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::gen *arg2 = 0 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg3 = *(giac::context **)&jarg3; 
  result = giac::UTPT((giac::gen const &)*arg1,(giac::gen const &)*arg2,arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1UTPT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_UTPT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_UTPF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::gen *arg2 = 0 ;
  giac::gen *arg3 = 0 ;
  giac::context *arg4 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg3 = *(giac::gen **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg4 = *(giac::context **)&jarg4; 
  result = giac::UTPF((giac::gen const &)*arg1,(giac::gen const &)*arg2,(giac::gen const &)*arg3,arg4);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1UTPF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_UTPF((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jboolean JNICALL Java_javagiac_giacJNI_on(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::gen *arg2 = 0 ;
  giac::gen *arg3 = 0 ;
  giac::context *arg4 = (giac::context *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::gen **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg3 = *(giac::gen **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen & reference is null");
    return 0;
  } 
  arg4 = *(giac::context **)&jarg4; 
  result = (bool)giac::on((giac::gen const &)*arg1,(giac::gen const &)*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1PERCENT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_PERCENT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ROLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ROLL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ROLLD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ROLLD((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SWAP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SWAP((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1DUP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_DUP((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1OVER(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_OVER((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1PICK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_PICK((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1DROP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_DROP((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1NOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_NOP((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1IFTE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_IFTE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RPN_1LOCAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RPN_LOCAL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RPN_1FOR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RPN_FOR((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RPN_1WHILE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RPN_WHILE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RPN_1UNTIL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RPN_UNTIL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RPN_1CASE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RPN_CASE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RCL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RCL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1VARS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_VARS((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ABS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ABS((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1MODULO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_MODULO((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RANDOM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RANDOM((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1MAXREAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_MAXREAL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1MINREAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_MINREAL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1EXPM1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_EXPM1((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1LNP1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_LNP1((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ADDROW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ADDROW((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ADDCOL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ADDCOL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SCALE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SCALE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SCALEADD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SCALEADD((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SWAPCOL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SWAPCOL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SUB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SUB((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RANDMAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RANDMAT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1REDIM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_REDIM((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1REPLACE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_REPLACE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1EIGENVAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_EIGENVAL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1EIGENVV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_EIGENVV((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SIZE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SIZE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1INT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_INT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1HPDIFF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_HPDIFF((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1HPINT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_HPINT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1HPSUM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_HPSUM((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1TAYLOR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_TAYLOR((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1POLYFORM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_POLYFORM((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1IS_1LINEAR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_IS_LINEAR((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SVD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SVD((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SVL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SVL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SPECRAD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SPECRAD((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SPECNORM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SPECNORM((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1COND(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_COND((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1SCHUR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_SCHUR((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1LQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_LQ((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1LU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_LU((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1QR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_QR((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1MANT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_MANT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1HMSX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_HMSX((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1DEGXRAD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_DEGXRAD((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1RADXDEG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_RADXDEG((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1PERCENTCHANGE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_PERCENTCHANGE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1PERCENTTOTAL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_PERCENTTOTAL((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ITERATE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ITERATE((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1MAKEMAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_MAKEMAT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1LSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_LSQ((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1NTHROOT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_NTHROOT((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1VIEWS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_VIEWS((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_ref((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}



SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI_apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::unary_function_ptr *arg2 = 0 ;
  giac::context *arg3 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::unary_function_ptr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::unary_function_ptr const & reference is null");
    return 0;
  } 
  arg3 = *(giac::context **)&jarg3; 
  result = giac::apply((giac::gen const &)*arg1,(giac::unary_function_ptr const &)*arg2,arg3);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}

SWIGEXPORT jstring JNICALL Java_javagiac_giacJNI_gen2string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  giac::gen *arg1 = 0 ;
  int arg2 ;
  giac::context *arg3 = (giac::context *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = *(giac::context **)&jarg3; 
  result = giac::gen2string((giac::gen const &)*arg1,arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_javagiac_giacJNI__1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  giac::gen *arg1 = 0 ;
  giac::context *arg2 = (giac::context *) 0 ;
  giac::gen result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(giac::gen **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "giac::gen const & reference is null");
    return 0;
  } 
  arg2 = *(giac::context **)&jarg2; 
  result = giac::_version((giac::gen const &)*arg1,arg2);
  *(giac::gen **)&jresult = new giac::gen((const giac::gen &)result); 
  return jresult;
}




#ifdef __cplusplus
}
#endif

